{"version":3,"sources":["NewComponent/NewTodo.js","App.js","serviceWorker.js","index.js"],"names":["NewTodo","props","state","done","onDone","bind","this","setState","classNames","className","type","aria-label","onClick","value","task","title","onDelete","key","Component","App","input1Change","e","next","target","changed","valueOld","tasks","id","onAdd","itemId","filter","obj","newItem","data-class","onChange","map","React","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2RAkEeA,G,8DA9Db,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXC,MAAM,GAER,EAAKC,OAAS,EAAKA,OAAOC,KAAZ,gBALG,E,qDASjBC,KAAKC,UAAS,kBAAa,CAC3BJ,MADc,EAAEA,W,+BAKR,IAAD,OAEHK,EAAW,oBAKf,OANeF,KAAKJ,MAAbC,OAGLK,GAAc,SAId,yBAAKC,UAAU,oBACb,yBAAKA,UAAU,uBACb,yBAAKA,UAAU,oBACb,2BAAOC,KAAK,WACLC,aAAW,oCACXC,QAAS,kBAAM,EAAKR,YAI/B,2BACEK,UAAWD,EACXG,aAAW,2BACXE,MAAOP,KAAKL,MAAMa,KAAKC,QACzB,4BAAQN,UAAU,iBACVG,QAAS,kBAAM,EAAKX,MAAMe,SAAS,EAAKf,MAAMgB,OADtD,e,GApCcC,cCyEPC,E,kDAvEb,WAAYlB,GAAQ,IAAD,8BACjB,cAAMA,IAsBRmB,aAAe,SAACC,GACd,IAAIC,EAAO,EAAKpB,MAChBoB,EAAKT,MAAQQ,EAAEE,OAAOV,MACtBS,EAAKE,QAAUF,EAAKT,QAAUS,EAAKG,SACnC,EAAKlB,SAASe,IAzBd,EAAKpB,MAAQ,CACXwB,MAAO,CACL,CAACC,GAAI,EAAGZ,MAAO,eAAWZ,MAAM,GAChC,CAACwB,GAAI,EAAGZ,MAAO,eAAWZ,MAAM,GAChC,CAACwB,GAAI,EAAGZ,MAAO,eAAWZ,MAAM,IAElCU,MAAO,GACPY,SAAU,IAEZ,EAAKT,SAAW,EAAKA,SAASX,KAAd,gBAChB,EAAKuB,MAAQ,EAAKA,MAAMvB,KAAX,gBACb,EAAKwB,OAAS,EAbG,E,qDAgBVF,GACPrB,KAAKC,UAAS,YACZ,MAAO,CACLmB,MAFuB,EAAXA,MAECI,QAAO,SAACC,GAAD,OAASA,EAAIJ,KAAOA,W,4BAWxCd,GACJ,IAAMmB,EAAU,CACdL,GAAIrB,KAAKuB,SAAUd,MAAOF,EAAOV,MAAM,GAEzCG,KAAKC,UAAS,YAAc,IAAZmB,EAAW,EAAXA,MAEd,MAAO,CACLA,MAFU,sBAAOA,GAAP,CAAcM,U,+BAOpB,IAAD,OACAN,EAASpB,KAAKJ,MAAdwB,MACP,OACE,yBAAKjB,UAAU,aACb,yCACA,yBAAKA,UAAU,eACb,2BAAOC,KAAK,OAAOuB,aAAW,QACvBxB,UAAU,qBACVE,aAAW,2BACXuB,SAAU5B,KAAKc,aACfP,MAAOP,KAAKJ,MAAMW,QAEzB,4BAAQJ,UAAU,kBACVG,QAAS,kBAAM,EAAKgB,MAAM,EAAK1B,MAAMW,SAD7C,UAGF,6BACGa,EAAMS,KAAI,SAAArB,GAAI,OACb,kBAAC,EAAD,CAASA,KAAMA,EACNG,IAAKH,EAAKa,GACVX,SAAU,kBAAM,EAAKA,SAASF,EAAKa,KACnCxB,KAAMuB,EAAMvB,gB,GA/DfiC,IAAMlB,WCQJmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.0ddf9e04.chunk.js","sourcesContent":["import React, {Component} from \"react\";\nimport \"./NewTodo.css\"\n\nclass NewTodo extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      done: false\n    }\n    this.onDone = this.onDone.bind(this)\n  }\n  \n  onDone(){\n    this.setState(({done}) => ({\n    done: !done\n    }))\n  }\n  \n  render() {\n    const {done} = this.state\n    let classNames=\"form-control mr-1\"\n    if(done){\n      classNames += \" done\"\n    }\n    \n    return (\n      <div className=\"input-group mt-2\">\n        <div className=\"input-group-prepend\">\n          <div className=\"input-group-text\">\n            <input type=\"checkbox\"\n                   aria-label=\"Checkbox for following text input\"\n                   onClick={() => this.onDone}\n            />\n          </div>\n        </div>\n        <input\n          className={classNames}\n          aria-label=\"Text input with checkbox\"\n          value={this.props.task.title}/>\n        <button className=\"btn btn-danger\"\n                onClick={() => this.props.onDelete(this.props.key)}>delete\n        </button>\n      </div>\n    )\n  }\n}\n\n// const NewTodo = ({task, onDelete, key}) => {\n//   return (\n//     <div className=\"input-group mt-2\">\n//       <div className=\"input-group-prepend\">\n//         <div className=\"input-group-text\">\n//           <input type=\"checkbox\"\n//                  aria-label=\"Checkbox for following text input\"\n//           />\n//         </div>\n//       </div>\n//       <input\n//              className=\"form-control mr-1\"\n//              aria-label=\"Text input with checkbox\"\n//              value={task.title}/>\n//       <button className=\"btn btn-danger\" onClick={() => onDelete(key)}>delete</button>\n//     </div>\n//   )\n// }\n\nexport default NewTodo;","import React from 'react';\nimport './App.css';\nimport NewTodo from \"./NewComponent/NewTodo\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      tasks: [\n        {id: 1, title: \"task №1\", done: true},\n        {id: 2, title: \"task №2\", done: false},\n        {id: 3, title: \"task №3\", done: false}\n      ],\n      value: '',\n      valueOld: '',\n    }\n    this.onDelete = this.onDelete.bind(this)\n    this.onAdd = this.onAdd.bind(this)\n    this.itemId = 4\n  }\n  \n  onDelete(id) {\n    this.setState(({tasks}) => {\n      return {\n        tasks: tasks.filter((obj) => obj.id !== id)\n      }\n    })\n  }\n  input1Change = (e) => {\n    let next = this.state;\n    next.value = e.target.value;\n    next.changed = next.value !== next.valueOld;\n    this.setState(next)\n    \n  }\n  onAdd(value){\n    const newItem = {\n      id: this.itemId++, title: value, done: false\n    }\n    this.setState(({tasks}) => {\n      const newArr = [...tasks, newItem]\n      return {\n        tasks: newArr\n      }\n    })\n  }\n  \n  render() {\n    const {tasks} = this.state\n    return (\n      <div className=\"container\">\n        <em>Todo List</em>\n        <div className=\"input-group\">\n          <input type=\"text\" data-class=\"hello\"\n                 className=\"form-control  mr-1\"\n                 aria-label=\"Text input with checkbox\"\n                 onChange={this.input1Change}\n                 value={this.state.value}\n          />\n          <button className=\"btn btn-success\"\n                  onClick={() => this.onAdd(this.state.value)}>+ add</button>\n        </div>\n        <div>\n          {tasks.map(task => (\n            <NewTodo task={task}\n                     key={task.id}\n                     onDelete={() => this.onDelete(task.id)}\n                     done={tasks.done}/>\n          ))}\n        </div>\n      </div>\n    )\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}